                              Perfitys plugin

The author has started writing the Perfitys Vim plugin to fulfill his personal
needs as a Vim user without cluttering his vimrc file with autocommands and
other settings. The plugin applies per file type settings and offers some
basic IDE (Integrated Development environment) features and automatic typing
fonctionalities.

The default behaviour of the plugin may not be suitable to every Vim users but
the plugin is extremely customizable and every default setting can be
overwritten by assigning specific variables in the vimrc file.

This plugin is a work in (slow) progress and new features may be added and
existing default settings modified.

The file type support is far from complete. Only a few file types are
supported. But support for other file types can easily be added.

1. Installation
2. Supported file types
3. Disabling the plugin
4. Per file type settings
        4.1. Text width
        4.2. Tab preferences
        4.3. Alternative file type
        4.4. "End of line" comment
        4.5. Bullet-lists
        4.6. Folding method
        4.7. Regular expression for left shift
5. IDE features
        5.1. Population of the quickfix window
        5.2. Running the current file
        5.3. Compiling Ada sources
        5.4. Issuing a "make" command
6. Automatic typing
        6.1. Primary separator
        6.2. Secondary separator
7. Re-sourcing of filetype plugins
8. Credits and licensing

==============================================================================
1. Installation

The Perfitys plugin comes with the following directory tree:

perfitys
        autoload
        doc
        ftplugin
        plugin

If you use Pathogen (a popular Vim plugin to manage Vim plugins), you just
have to place the whole tree in your bundle directory (on a Linux system, it
is probably ~/.vim/bundle). If you have Git installed and an internet access,
just issue this command in a terminal after moving to your bundle directory:

git clone git://github.com/thierr26/perfitys.git

Make sure that Pathogen and the filetype plugins are enabled in your vimrc
file with the following commands:

        call pathogen#infect()
        call pathogen#helptags()
        filetype plugin indent on


The author hasn't tested the other popular Vim plugin managers, but it should
be possible to do the installation in a similar way when using those plugins.

If you don't use a plugin manager, you have to manually copy the files. For
example, on a Linux system, the files in perfitys/autoload must be copied to
~/.vim/autoload. The files in perfitys/doc must be copied to ~/.vim/doc,
etc...

Whatever the way you have installed Perfitys, you have to make sure you have
enabled the filetype plugins in your vimrc file with the
"filetype plugin indent on" command.

==============================================================================
2. Supported file types

Currently, the following file types are supported:

ada
c
conf
css
dosbatch
gitcommit
haskell
help
html
make
matlab
octave
php
python
rst
ruby
sh
texinfo
text
vim
xdefaults

==============================================================================
3. Disabling the plugin

You can completely disable the Perfitys plugin without uninstalling it by
adding this line to your vimrc file:

        let g:loaded_perfitys = 1




The file type specific scripts of Perfitys are not run if another filetype
plugin has already set the variable b:did_ftplugin.

If they are run, the Perfitys file type specific scripts set the variable
b:did_ftplugin, which causes other filetype plugins to be disabled. You can
prevent Perfitys from setting b:did_ftplugin by adding the following line to
your vimrc file:

        let g:perfitys_do_not_set_did_ftplugin = 1


If you want to prevent Perfitys from setting b:did_ftplugin for a specific
file type only (say the "sh" file type), add the following line to your vimrc
file:

        let g:perfitys_ada_do_not_set_did_ftplugin = 1


==============================================================================
4. Per file type settings

4.1. Text width


The 'textwidth' option is set by Perfitys depending on the file type. The
default settings are as follows:

| File type                                     | 'textwidth' option value |
|-----------------------------------------------+--------------------------|
| ada, c, conf, css, dosbatch, haskell, html    | 79                       |
| gitcommit                                     | 72                       |
| help, text                                    | 78                       |
| make, matlab, octave, php, python, rst, ruby  | 79                       |
| sh, vim, xdefaults                            | 79                       |
| texinfo                                       | 76                       |

The default settings can be overwritten by setting global variables in your
vimrc file. For example, if you want a text width of 80 for the sh file type,
add the following line to your vimrc file:

        let g:perfitys_sh_textwidth = 80




If you don't want a per file type text width, but a common text width (say 80)
for all the supported file types, add the following line to your vimrc file:

        let g:perfitys_common_textwidth = 80




Perfitys also changes the 'colorcolumn' option. By default, it adds a value
which is the textwidth value plus two. If you prefer to highlight the column
next to text width, add the following line to your vimrc file:

        let g:perfitys_colorcolumn_relative_to_width = 1



Note that if the text width has been set to 0, then the 'colorcolumn' option
is not affected.

If you don't want Perfitys to affect the 'colorcolumn' option at all, add the
following line to your vimrc file:

        let g:perfitys_do_not_set_colorcolumn = 1


----------------------------------------------
4.2. Tab preferences


The 'tabstop', 'shiftwidth' and 'softtabstop' are set by Perfitys depending on
the file type. The default settings are as follows:

| File type      | 'tabstop', 'shiftwidth' and 'softtabstop' options value |
|----------------+---------------------------------------------------------|
| ada            | 3                                                       |
| c, conf, css   | 4                                                       |
| dosbatch       | 4                                                       |
| gitcommit      | 4                                                       |
| haskell        | 4                                                       |
| html, rst      | 2                                                       |
| make           | 4                                                       |
| matlab, octave | 4                                                       |
| php, python    | 4                                                       |
| ruby, sh, vim  | 4                                                       |
| help, text     | 8                                                       |
| texinfo        | 4                                                       |
| xdefaults      | 4                                                       |

The default settings can be overwritten by setting global variables to your
vimrc file. For example, if you want a tab width of 8 for the sh file type,
add the following line to your vimrc file:

        let g:perfitys_sh_tabstop = 8




If you don't want a per file type tab width, but a common tab width (say 8)
for all the supported file types, add the following line to your vimrc file:

        let g:perfitys_common_tabstop = 8



By default, the 'expandtab' option is set to expandtab for all the supported
file types. If for a particular file type (say sh) you want the 'expandtab'
option set to noexpandtab, add the following line to your vimrc file:

        let g:perfitys_sh_expandtab = "noexpandtab"


Actually, the allowed values for such variables are "expandtab",
"noexpandtab", "et" and "noet", similarly to the 'expandtab' option.



If you want the 'expandtab' option to be set to noexpandtab for all the
supported file types, add the following line to your vimrc file:

        let g:perfitys_common_expandtab = "noexpandtab"


----------------------------------------------
4.3. Alternative file type


Perfitys provides a function to change the 'filetype' option for a buffer
(only if the 'filetype' option has been set). This function can be operated
using the :AltFileType command, or using the Plugin | Perfitys menu.

A key mapping is also defined: <Leader>FT

You can change this mapping (say to <Leader>ZZ) by adding the following line
to your vimrc file:

        map <Leader>ZZ <Plug>PerfitysAltFileType


With the default setting, the functions changes the 'filetype' option if the
'filetype' option is set to "help", "text", "php" or "html". If the 'filetype'
option has an other value, the function does not change it.

| When 'filetype' is set to | :AltFileType changes it to |
|---------------------------+----------------------------|
| help                      | text                       |
| text                      | help                       |
| html                      | php                        |
| php                       | html                       |


You can redefine the behaviour of the function by adding a line like the
following in your vimrc file:

let g:perfitys_alt_filetype = {'help': "text", 'php': "html"}


g:perfitys_alt_filetype is a dictionary variable defining pairs of filetype
values. If the 'filetype' option is in one of the pairs, then the function
changes the 'filetype' value to the other value of the pair. You can add all
the pairs you need.

----------------------------------------------
4.4. "End of line" comment

The Vim default value for the 'comments' option seems to be:

s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-

For the file types which support "end of line" comments, Perfitys adds the
associated comment leader to the 'comments' option (unless the comment leader
is already in the 'comments' option.

For exemple, for the ada file type, Perfitys changes the 'comments' option to:

s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-,b:--

(",b:--" has been appended to the 'comments' option).

----------------------------------------------
4.5. Bullet-lists

The Vim default value for the 'comments' option seems to be:

s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-

The "fb:-" means that "- " is considered to be a leader for a bullet-list
item (see format-comments). And this is applied for all file types.

The only action of Perfitys regarding bullet-lists is to set the 'comments'
option to "://,b:#,:%,:XCOMM,n:>,fb:-,fb:*" for the gitcommit file type. This
implies that for the gitcommit file type, both "- " and "* " are considered to
be leaders for bullet-list items.

----------------------------------------------
4.6. Folding method

The 'foldmethod' option is set or not set by Perfitys, depending on the file
type. The default settings are as follows:

| File type      | 'foldmethod' option value |
|----------------+---------------------------|
| all file types | manual                    |

Note that the 'foldmethod' option used to be set to "expr" by Perfitys for a
few file types (ada, vim, sh, octave, matlab), but this degraded Vim
performance a lot.

The default settings can be overwritten by setting global variables in your
vimrc file. For example, if you want 'foldmethod' set to indent for the sh
file type, add the following line to your vimrc file:

        let g:perfitys_sh_foldmethod = "indent"


For a file type for which Perfitys sets the 'foldmethod' option, if the value
of the 'foldmethod' option is "expr", Perfitys sets the 'foldexpr' option to
"PerfitysShFoldLevel(v:lnum)" if the function PerfitysShFoldLevel exists, or
to "0" if the function does not exist. The "Sh" part in the name of the
function refers to the file type. For a file type other than sh, say html, the
name of the function would be PerfitysHtmlFoldLevel.

You can specify another expression for the 'foldexpr' option by assigning it
to a global variable in your vimrc file. For example, for the file type sh,
the name of the variable would be g:perfitys_sh_foldexpr.

You can see the behavior of Perfitys by downloading and opening the following
files:

pull_vim_plugins from this repository:
https://github.com/thierr26/thierr26_vim-gtk_config

plugin/perfitys.vim from this repository:
https://github.com/thierr26/perfitys

As far as the 'foldtext' option is concerned, you can specify your own
expression by assigning it to a global variable in your vimrc file. For
example, for the file type sh, the name of the variable would be
g:perfitys_sh_foldtext.

If you don't want Perfitys to affect the 'foldmethod' option at all, add the
following line to your vimrc file:

        let g:perfitys_do_not_set_foldmethod = 1

----------------------------------------------
4.7. Regular expression for left shift


Perfitys provides a function to shift a text block to the left, by removing
the first characters of the lines of the block according to a regular
expression. This function can be operated using the :BeginLeftShift command,
or using the Plugin | Perfitys menu.

A key mapping is also defined: <Leader>LL

You can change this mapping (say to <Leader>ZZ) by adding the following line
to your vimrc file:

        map <Leader>ZZ <Plug>PerfitysBeginLeftShift


For all file types except the "ada" file type, the regular expression for left
shift is set to "^ \+" (that is one ore more spaces at the beginning of the
line). The :BeginLeftShift command shifts to the left the current line by
removing the leading spaces, and also shifts lines above and below the current
line if they have the same number of leading spaces.

The :BeginLeftShift command also decreases the 'textwidth' option by the
number of leading spaces (only if this number is lower than the 'textwidth'
option).

The :BeginLeftShift command also turns syntax highlighting off in the current
buffer.

For the "ada" file type, the regular expression for left shift is set to
"^ *--[^ ]* \+" (that is 0 or more spaces at the beginning of the line,
followed by the Ada comment opening sequence ("--"), possibly followed by non
space characters, followed by one or more spaces). The :BeginLeftShift command
shifts to the left the current line by removing the part of the line matching
the regular expression, and also shifts lines above and below the current line
if they contain the exact same match of the regular expression.

The :BeginLeftShift command also decreases the 'textwidth' option by the
character length of the match (only if this length is lower than the
'textwidth' option) and turns syntax highlighting off in the current buffer.

The default settings can be overwritten by setting global variables in your
vimrc file. For example, if you want the "^ *# \+" regular expression for
the sh file type, add the following line to your vimrc file (note the
escaping of the backslash): >

        let g:perfitys_sh_left_shift_reg_exp = "^ *# \\+"


The point of this left shift feature is to ease the edition of text blocks
(typically comment blocks in source code files). Usually, you don't need
shifting to edit comment blocks easily and you can use the |gq| command to
format the comment block, thanks to the file type plugins provided with Vim.
But in some particular cases, |gq| does not behave as expected and shifting
makes life easier.


Of course, Perfitys provides a function to revert the shift caused by
:BeginLeftShift. The function can be operated using the :EndLeftShift command,
or using the Plugin | Perfitys menu.

A key mapping is also defined: <Leader>L

You can change this mapping (say to <Leader>ZZ) by adding the following line
to your vimrc file:

        map <Leader>ZZ <Plug>PerfitysEndLeftShift


Note that :EndLeftShift requires that you do a visual selection of the block
before you call it.

==============================================================================
5. IDE features

5.1. Population of the quickfix window


Perfitys provides a function to populate the quickfix-window. This function
can be operated using the :VimgrepInQF command, or using the Plugin | Perfitys
menu. It runs a vimgrep command and opens the quickfix-window if the
vimgrep command has yielded results.

A key mapping is also defined: <Leader>QF

You can change this mapping (say to <Leader>ZZ) by adding the following line
to your vimrc file:

        map <Leader>ZZ <Plug>PerfitysVimgrepInQF

The function is applicable if a buffer local variable exists with the name
b:perfitys_vimgrepinqf_params and this variable is a dictionary with the
following keys:
- reg_exp: The regular expression to be used in the vimgrep command;
- file: a string to be used as the file argument in the vimgrep command;
- min_cwd_depth: a directory depth threshold (if the depth of the current
  directory is below this threshold, then the function will abort);
- relative_to_home: if nonzero, then the directory depth will be evaluated
  relative to the user's home directory and the function will abort if the
  current directory is not below the user's home directory.

By default, Perfitys defines such a dictionary for a few file types:

| File type      | reg_exp                       | file     |
|----------------+-------------------------------+----------|
| matlab, octave | ^[^%]*\<function\>\s*\w       | **/*.m   |
| vim            | ^\s*fu\(nction\)\?!\?\s*\S\+( | **/*.vim |

min_cwd_depth is set to 2 and relative_to_home to 1.

Some functions are provided to change the height of the quickfix window. They
can be operated using the :MakeQFTaller and :MakeQFSmaller commands or using
the Plugin | Perfitys menu.

Key mappings are also defined: <Leader>+ and <Leader>-

To change the mappings add lines like the following in your |vimrc| file:

        map <Leader>ZZ <Plug>PerfitysMakeQFTaller


By default, the height of the quickfix window changes by steps of three lines.
You can force the step to a different value (say 6) by adding the following
line in your |vimrc| file:
        let g:perfitys_qfheightstep = 6


----------------------------------------------
5.2. Running the current file


Perfitys provides a function to run the currently edited file with user
defined arguments. This function can be operated using the :RunWithArgs
command, or using the Plugin | Perfitys menu.

A key mapping is also defined: F8

You can change this mapping (say to <Leader>ZZ) by adding the following line
to your vimrc file:

        map <Leader>ZZ <Plug>PerfitysRunWithArgs

The function lets the user type the arguments (separated by spaces) to be used
and then runs the currently edited files with those arguments.


Another function is provided to run the currently edited file again with the
same arguments. This function can be operated using the :RunAgainWithArgs
command, or using the Plugin | Perfitys menu.

A key mapping is also defined: F9

You can change this mapping (say to <Leader>ZZ) by adding the following line
to your vimrc file:

        map <Leader>ZZ <Plug>PerfitysRunAgainWithArgs


By default, the output is displayed in the status line. You can change this
behavior using the :RedirectOutputToNewBuffer command. It causes the output to
be redirected to new buffer.

The command is available in the Plugin | Perfitys menu and a key mapping is
defined: <Leader>RR

You can change this mapping (say to <Leader>ZZ) by adding the following line
to your vimrc file:

        map <Leader>ZZ <Plug>PerfitysRedirectOutputToNewBuffer


You can revert to the default behavior using the
:DoNotRedirectOutputToNewBuffer. The key mapping is: <Leader>RN

You can change this mapping (say to <Leader>ZZ) by adding the following line
to your vimrc file:

        map <Leader>ZZ <Plug>PerfitysDoNotRedirectOutputToNewBuffer

Running the current file is currently applicable to the files of type:
sh


----------------------------------------------
5.3. Compiling Ada sources


Perfitys provides functions to apply various gprbuild commands if the current
file is an Ada file. The functions work properly only if there is a proper
default GNAT project file in the current directory. It can be a default.gpr
file or any .gpr file if it is the only one in the current directory.

The first function compiles the current file. It can be operated using the
:CompileFile command, or using the Plugin | Perfitys menu.

A key mapping is also defined: F10

The gprbuild command is "gprbuild -p -f -c -gnatc -u " followed by the name of
the current file.


A second function compiles all the sources for the GNAT project file. It can
be operated using the :CompileAll command, or using the Plugin | Perfitys
menu.

A key mapping is also defined: F11

The gprbuild command is "gprbuild -p -U".


Finally, a third function compiles the current file to an executable. Note
that this works only if the current file is a "main program". The function can
be operated using the :Build command, or using the Plugin | Perfitys menu.

A key mapping is also defined: F12

The gprbuild command is "gprbuild -p " followed by the name of the current
file.


----------------------------------------------
5.4. Issuing a "make" command

Perfitys provides a function to issue a make command. It is currently
applicable to the "ada" and "rst" file types and is exclusive of the function
to run the currently edited file because it is actually the same function
(:RunWithArgs). The same key mappings are defined (F8 and F9).

Note that the function may be used to issue any command. When prompted for
arguments to the make command, just erase "make" and type the command you want
to issue.

==============================================================================
6. Automatic typing


6.1. Primary separator

Perfitys provides a function for inserting a separator line in the current
buffer. Well actually two functions, because the author has encountered the
need for two different kinds of separator lines in the same file.

Both kinds of separator lines are comment lines if the file type is of a
programming language supported by Perfitys.

One kind is said "primary separator", the other kind is said "secondary
separator".



A primary separator line can be inserted using the :Sep or :PrimSep commands,
or using the Plugin | Perfitys menu.

A key mapping is also defined: <Leader>SS

You can change this mapping (say to <Leader>ZZ) by adding the following line
to your vimrc file:

        map <Leader>ZZ <Plug>PerfitysPrimSep


The exact look of a separator line depends on the file type, but you can force
you look you want by assigning specific dictionary variables in your vimrc
file.

For example, the following statement in your vimrc file will cause the
primary separator lines to contain "+-" sequences and to be 79 characters long
and to be surrounded by one empty line when the file type is "sh":

        let g:perfitys_sh_prim_sep = {
                    \ 'indent_level': 0,
                    \ 'post_comment_leader_space': " ",
                    \ 'repeating_sequence': "+-",
                    \ 'length': 79,
                    \ 'pre_comment_trailer_space': " ",
                    \ 'empty_lines_above': 1,
                    \ 'empty_lines_below': 1,
                    \ }




You can force the same look for primary separators in all the file types by
assigning a similar dictionary to g:perfitys_common_prim_sep in your vimrc
file:

        let g:perfitys_common_prim_sep = {
                    \ 'indent_level': 0,
                    \ 'post_comment_leader_space': " ",
                    \ 'repeating_sequence': "+-",
                    \ 'length': 79,
                    \ 'pre_comment_trailer_space': " ",
                    \ 'empty_lines_above': 1,
                    \ 'empty_lines_below': 1,
                    \ }


----------------------------------------------
6.2. Secondary separator

Secondary separator lines are similar to primary separator lines, but they can
have there own look.

A secondary separator line can be inserted using the :SecondSep command, or
using the Plugin | Perfitys menu.

The key mapping is: <Leader>S

You can change this mapping (say to <Leader>ZZ) by adding the following line
to your vimrc file:

        map <Leader>ZZ <Plug>PerfitysSecondSep




You can force the look for secondary separators the same way you can for a
primary separator, by assigning specific dictionary variables in your vimrc
file:

        let g:perfitys_sh_second_sep = {
                    \ 'indent_level': 2,
                    \ 'post_comment_leader_space': " ",
                    \ 'repeating_sequence': "+-",
                    \ 'length': 59,
                    \ 'pre_comment_trailer_space': " ",
                    \ 'empty_lines_above': 1,
                    \ 'empty_lines_below': 1,
                    \ }


to apply the look to files of type "sh" only, or

        let g:perfitys_common_prim_sep = {
                    \ 'indent_level': 2,
                    \ 'post_comment_leader_space': " ",
                    \ 'repeating_sequence': "+-",
                    \ 'length': 59,
                    \ 'pre_comment_trailer_space': " ",
                    \ 'empty_lines_above': 1,
                    \ 'empty_lines_below': 1,
                    \ }


to apply the look to all file types.

==============================================================================
7. Re-sourcing of filetype plugins


In some circumstances, you might want to re-apply the Perfitys filetype plugin
to a buffer. It is possible using the :SourceFTPlugin command, or using the
Plugin | Perfitys menu.

The key mapping is: <Leader>SP

You can change this mapping (say to <Leader>ZZ) by adding the following line
to your vimrc file: >

        map <Leader>ZZ <Plug>PerfitysSourceFTPlugin


==============================================================================
8. Credits and licensing

Author: Thierry Rascle (thierr26@free.fr)

Licensed under the Unlicense license (see http://unlicense.org).
